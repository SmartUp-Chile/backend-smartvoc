name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Permite ejecutar manualmente el flujo desde la interfaz de GitHub

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 black
        
    - name: Lint with flake8
      run: |
        # Detener la compilación por errores de sintaxis o nombres indefinidos
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Trata todos los comentarios/docstrings/etc con una línea por error
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with Black
      run: |
        black --check --diff .
      continue-on-error: true  # No queremos fallar por formato aún

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
        
    - name: Prepare test directory
      run: |
        mkdir -p instance
        
    - name: Run tests
      run: |
        # Por ahora sólo verificamos que la aplicación se inicia
        # En el futuro se agregarán tests unitarios
        python -c "import app; print('App import successful')"
        # pytest --cov=./ --cov-report=xml
        
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./coverage.xml
    #     fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: smartvoc-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Deploy to production
  #     run: echo "Aquí iría el código para desplegar a producción" 